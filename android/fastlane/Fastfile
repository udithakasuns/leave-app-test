default_platform(:android)

APP_PACKAGE_NAME = "com.rootcodelabs.leaveapp"
APP_VERSION_FILE_PATH = "../../src/configs/APP_VERSION"
GIT_BRANCH_NAME = "KA/fastlane"
SERVICE_JSON_KEY_PATH = "./google_play_service_account_api_key.json"
PACKAGE_JSON_PATH = "../package.json"
GRADLE_FILE_PATH = "./app/build.gradle"
ENV_PROD = "PROD"
ENV_STG = "STG"
ENV_QA = "QA"

before_all do
  ensure_git_branch(
    branch: GIT_BRANCH_NAME
  )
  git_pull
end

platform :android do
  desc "Build and publish the android application"
  lane :build do |options|

    env = options[:env] # STG | QA | PROD

    # Get the previous internal test build number from google play store
    previous_internal_build_number = google_play_track_version_codes(
      package_name: APP_PACKAGE_NAME,
      track: "internal",
      json_key: SERVICE_JSON_KEY_PATH,
    )[0]

    # Get the previous production build number from google play store
    previous_production_build_number = google_play_track_version_codes(
      package_name: APP_PACKAGE_NAME,
      track: "production",
      json_key: SERVICE_JSON_KEY_PATH,
    )[0]

    # Find the latest build number
    latest_build_number = 0
    if previous_internal_build_number <= previous_production_build_number
      latest_build_number =  previous_production_build_number
    else
      latest_build_number = previous_internal_build_number
    end
      
    new_build_number = latest_build_number + 1
    puts "################### New Build Number ###################"
    puts new_build_number
    puts "####################################################"

    increment_version_code(
      gradle_file_path: GRADLE_FILE_PATH,
      version_code: new_build_number
    )

    # Version name will be updated based on the value mention in the src/configs/VERSION.txt file
    version_name = File.read(APP_VERSION_FILE_PATH)
    # Attatch the version number, if env is PROD version name is x.x.x otherwise x.x.x_STG. Note that, This underscore must be there. Otherwise version number will not be shown correctly.
    new_version_name = (env == ENV_PROD) ? version_name : (version_name +"_"+ env)

    puts "################### New Version Name ###################"
    puts new_version_name
    puts "####################################################"
  
    increment_version_name(
      gradle_file_path: GRADLE_FILE_PATH,
      version_name: new_version_name
    )

    yarn(command: 'install',  package_path: PACKAGE_JSON_PATH)

    # Change amplify environment. Note that, in amplify both STG and QA environments are used dev environment.
    if env === ENV_PROD
      puts "################### Changing Amplify Environment to prod ###################"
      yarn(command: 'amplify:checkout:prod',  package_path: PACKAGE_JSON_PATH)
    else
      puts "################### Changing Amplify Environment to dev ###################"
      yarn(command: 'amplify:checkout:dev',  package_path: PACKAGE_JSON_PATH)
    end

    # Clean and build the release
    releaseFilePath = File.join(Dir.pwd, "../app", "my-release-key.keystore")
    gradle(task: 'clean')
    gradle(
      task: 'bundle',
      build_type: 'Release',
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => releaseFilePath,
        "android.injected.signing.store.password" => "dTY93EMHxuCCCWJ6",
        "android.injected.signing.key.alias" => "leave",
        "android.injected.signing.key.password" => "dTY93EMHxuCCCWJ6",
      }
    )

    # Upload release to google play store based on the env.
    upload_to_play_store(
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_screenshots: true,
      skip_upload_images: true,
      skip_upload_apk: true,
      changes_not_sent_for_review: true, 
      track: env === ENV_PROD ? 'production' : 'internal'
    )
  end
end

